Issue location: line 6, column 5
Issue type: Null Dereference
Responsible var:x
State:
unsat:false,
bo: { v3 -> 1, v4 -> 0 },
citv: { v3 -> =1, v4 -> =null },
formula: known=true (no var=var)
               &&
               v3 = 1 ∧ v4 = 0
               &&
               0=v4∧1=v3
               &&
               true (no tableau)
               &&
               true (no atoms),
         pruned=true (no atoms),
         both=true (no var=var)
              &&
              v3 = 1 ∧ v4 = 0
              &&
              0=v4∧1=v3
              &&
              true (no tableau)
              &&
              true (no atoms)
{ roots={ n$0=v4, &x=v2 };
  mem  ={ v2 -> { * -> v4 } };
  attrs={ v1 -> { MustBeValid(, None, t=0), Uninitialized },
          v2 -> { MustBeValid(, None, t=0),
                  WrittenTo ,
                  Blame(Client, foo1, [MemLeak;UseAfterFree;NPE;], [MLHand;UAFHand;NPEHand;], [Update;Update;Update;]) },
          v3 -> { Invalid ConstantDereference(is assigned to the constant 1),
                  Blame(Client, foo1, [MemLeak;UseAfterFree;NPE;], [MLHand;UAFHand;NPEHand;], [Update;Update;Update;]) },
          v4 -> { Invalid ConstantDereference(is assigned to the null pointer),
                  Blame(Vendor, vendor_code, [MemLeak;UseAfterFree;NPE;], [MLHand;UAFHand;NPEHand;], [Update;Update;Update;]),
                  BlamePathCondition } };}
PRE=[{ roots={ };
       mem  ={ };
       attrs={ };}]
need_specialization=false
skipped_calls={ }
Topl={len=0;content=
       [  ]}
full_trace=4
5
6
1/1 [################################################################################] 100% 18.86ms

san_example.c:6: error: Null Dereference
  `x` could be null (from the call to `vendor_code()` on line 5) and is dereferenced.
  4. void foo1(){
  5.     int* x = vendor_code(1);
  6.     *x = 1;
         ^
  7. }
  8.


Found 1 issue
             Issue Type(ISSUED_TYPE_ID): #
  Null Dereference(NULLPTR_DEREFERENCE): 1
robbie@soccf-pser1-16:~/infer/examples/pulse$ infer --pulse-only --pulse-isl --pulse-max-disjuncts 25 --pulse-max-cfg-size 500000 --autocode-check-mode --autocode-function vendor_code -- clang -c mem_leak_usage.c
Capturing in make/cc mode...
Found 1 source file to analyze in /home/robbie/infer/examples/pulse/infer-out
1/1 [################################################################################] 100% 22.298ms
 vendor_code [defined, Return type: void, Formals:  x:int*, Locals:  value:int]
  [ 0.0s] idle
Error:  ] idle
Domain: unsat:false,
                   bo: { v2 -> [max(0, v2), min(0, v2)],
                         v4 -> [max(0, v2), min(0, v2)] },
                   citv: { v2 -> =null, v4 -> =null },
                   formula: known=true (no var=var)
                                  &&
                                  v4 = 0
                                  &&
                                  0=v4
                                  &&
                                  true (no tableau)
                                  &&
                                  true (no atoms),
                            pruned={[v2] = 0},
                            both=v2=v4
                                 &&
                                 v2 = 0
                                 &&
                                 0=v4
                                 &&
                                 true (no tableau)
                                 &&
                                 true (no atoms)
                   { roots={ &x=v1 };
                     mem  ={ v1 -> { * -> v2 }, v2 -> { } };
                     attrs={ v1 -> { MustBeValid(, None, t=0),
                                     Blame(Vendor, vendor_code, [MemLeak;UseAfterFree;NPE;], [MLHand;UAFHand;NPEHand;], [Update;Update;Update;]) },
                             v2 -> { Invalid ConstantDereference(is assigned to the null pointer),
                                     Blame(Unknown, vendor_code, [MemLeak;UseAfterFree;NPE;], [MLHand;UAFHand;NPEHand;], [Update;Update;Update;]) },
                             v3 -> { s&value (variable `value` declared here at line 16 :t0
                                              ) at line 22, column 1,
                                     MustBeValid(, None, t=0),
                                     Uninitialized } };}
                   PRE=[{ roots={ &x=v1 };
                          mem  ={ v1 -> { * -> v2 }, v2 -> { } };
                          attrs={ v1 -> { MustBeInitialized(, t=0),
                                          MustBeValid(, None, t=0) } };}]
                   need_specialization=false
                   skipped_calls={ }
                   Topl={len=0;content=
                          [  ]}
                   full_trace=16
                   18

 vendor_code [defined, Return type: void, Formals:  x:int*, Locals:  value:int]

Error:
Domain: unsat:false,
                   bo: { v2 -> v2, v4 -> 0 },
                   citv: { v2 -> ≠null, v4 -> =null },
                   formula: known=true (no var=var)
                                  &&
                                  v4 = 0
                                  &&
                                  0=v4
                                  &&
                                  true (no tableau)
                                  &&
                                  {is_int([v5]) = 1},
                            pruned={[v2] ≠ 0},
                            both=true (no var=var)
                                 &&
                                 v4 = 0
                                 &&
                                 0=v4
                                 &&
                                 true (no tableau)
                                 &&
                                 {is_int([v5]) = 1}∧{[v2] ≠ 0}
                   { roots={ &x=v1 };
                     mem  ={ v1 -> { * -> v2 },
                             v2 -> { * -> v5 },
                             v3 -> { * -> v5 } };
                     attrs={ v1 -> { MustBeValid(, None, t=0),
                                     Blame(Vendor, vendor_code, [MemLeak;UseAfterFree;NPE;], [MLHand;UAFHand;NPEHand;], [Update;Update;Update;]) },
                             v2 -> { ISLAbduced ,
                                     Blame(Vendor, vendor_code, [MemLeak;UseAfterFree;NPE;], [MLHand;UAFHand;NPEHand;], [Update;Update;Update;]) },
                             v3 -> { s&value (variable `value` declared here at line 16 :t0
                                              ) at line 19, column 9,
                                     MustBeValid(, None, t=0),
                                     WrittenTo ,
                                     Blame(Vendor, vendor_code, [MemLeak;UseAfterFree;NPE;], [MLHand;UAFHand;NPEHand;], [Update;Update;Update;]) },
                             v4 -> { Invalid ConstantDereference(is assigned to the null pointer),
                                     Blame(Vendor, vendor_code, [MemLeak;UseAfterFree;NPE;], [MLHand;UAFHand;NPEHand;], [Update;Update;Update;]) },
                             v5 -> { Blame(Unknown, vendor_code, [MemLeak;UseAfterFree;NPE;], [MLHand;UAFHand;NPEHand;], [Update;Update;Update;]) } };}
                   PRE=[{ roots={ &x=v1 };
                          mem  ={ v1 -> { * -> v2 },
                                  v2 -> { * -> v5 },
                                  v5 -> { } };
                          attrs={ v1 -> { MustBeInitialized(, t=0),
                                          MustBeValid(, None, t=0) },
                                  v2 -> { ISLAbduced ,
                                          MustBeInitialized(, t=5),
                                          MustBeValid(, None, t=5) } };}]
                   need_specialization=false
                   skipped_calls={ }
                   Topl={len=0;content=
                          [  ]}
                   full_trace=16
                   18
                   19

 vendor_code [defined, Return type: void, Formals:  x:int*, Locals:  value:int]

Error:
Domain: {ISLLatentMemoryError unsat:false,
                                         bo: { v2 -> v2, v4 -> 0 },
                                         citv: { v2 -> ≠null, v4 -> =null },
                                         formula: known=true (no var=var)
                                                        &&
                                                        v4 = 0
                                                        &&
                                                        0=v4
                                                        &&
                                                        true (no tableau)
                                                        &&
                                                        true (no atoms),
                                                  pruned={[v2] ≠ 0},
                                                  both=true (no var=var)
                                                       &&
                                                       v4 = 0
                                                       &&
                                                       0=v4
                                                       &&
                                                       true (no tableau)
                                                       &&
                                                       {[v2] ≠ 0}
                                         { roots={ n$1=v2, &value=v3, &x=v1 };
                                           mem  ={ v1 -> { * -> v2 },
                                                   v2 -> { } };
                                           attrs={ v1 -> { MustBeValid(, None, t=0),
                                                           Blame(Vendor, vendor_code, [MemLeak;UseAfterFree;NPE;], [MLHand;UAFHand;NPEHand;], [Update;Update;Update;]) },
                                                   v2 -> { Invalid CFree(was invalidated by call to `free()`),
                                                           Blame(Unknown, vendor_code, [MemLeak;UseAfterFree;NPE;], [MLHand;UAFHand;NPEHand;], [Update;Update;Update;]) },
                                                   v3 -> { MustBeValid(, None, t=0),
                                                           Uninitialized },
                                                   v4 -> { Invalid ConstantDereference(is assigned to the null pointer)
                                                           Blame(Vendor, vendor_code, [MemLeak;UseAfterFree;NPE;], [MLHand;UAFHand;NPEHand;], [Update;Update;Update;]) } };}
                                         PRE=[{ roots={ &x=v1 };
                                                mem  ={ v1 -> { * -> v2 },
                                                        v2 -> { } };
                                                attrs={ v1 -> { MustBeInitialized(, t=0),
                                                                MustBeValid(, None, t=0) },
                                                        v2 -> { Invalid CFree(was invalidated by call to `free()`) } };}]
                                         need_specialization=false
                                         skipped_calls={ }
                                         Topl={len=0;content=
                                                [  ]}
                                         full_trace=16
                                         18
                                         19}
foo1 [defined, Return type: void, Formals: None, Locals:  p1:int*]

Issue location: line 28, column 9
Issue type: Memory Leak
Responsible var:
State:
unsat:false,
bo: { v5 -> [1, +oo], v9 -> 0, v10 -> 1 },
citv: { v5 -> ≥1, v9 -> =null, v10 -> =1 },
formula: known=true (no var=var)
               &&
               v5 = a1 +1 ∧ v9 = 0 ∧ v10 = 1
               &&
               0=v9∧1=v10∧[a1 +1]=v5
               &&
               true (no tableau)
               &&
               {is_int([v8]) = 1},
         pruned={[v5] ≠ 0},
         both=true (no var=var)
              &&
              v5 = a2 +1 ∧ v9 = 0 ∧ v10 = 1
              &&
              0=v9∧1=v10∧[a2 +1]=v5
              &&
              true (no tableau)
              &&
              {is_int([v8]) = 1}∧{[v5] ≠ 0}
{ roots={ };
  mem  ={ v2 -> { * -> v5 }, v5 -> { * -> v10 } };
  attrs={ v1 -> { MustBeValid(, None, t=0), Uninitialized },
          v2 -> { s&p1 (variable `p1` declared here at line 25 :t1 ) at line 28, column 9,
                  MustBeValid(, None, t=0),
                  WrittenTo ,
                  Blame(Client, foo1, [MemLeak;UseAfterFree;NPE;], [MLHand;UAFHand;NPEHand;], [Update;Update;Update;]) },
          v5 -> { Allocated,
                  DynamicType ,
                  ISLAbduced ,
                  MustBeValid(, None, t=0),
                  UnreachableAt(line 28, column 9),
                  WrittenTo ,
                  Blame(Client, foo1, [MemLeak;UseAfterFree;NPE;], [MLHand;UAFHand;NPEHand;], [Update;Update;Update;]),
                  BlamePathCondition },
          v8 -> { Blame(Unknown, vendor_code, [MemLeak;UseAfterFree;NPE;], [MLHand;UAFHand;NPEHand;], [Update;Update;Update;]),
                  BlamePathCondition },
          v9 -> { Invalid ConstantDereference(is assigned to the null pointer),
                  Blame(Client, foo1, [MemLeak;UseAfterFree;NPE;], [MLHand;UAFHand;NPEHand;], [Update;Update;Update;]) },
          v10 -> { Invalid ConstantDereference(is assigned to the constant 1),
                   Blame(Client, foo1, [MemLeak;UseAfterFree;NPE;], [MLHand;UAFHand;NPEHand;], [Update;Update;Update;]) } };}
PRE=[{ roots={ };
       mem  ={ };
       attrs={ };}]
need_specialization=false
skipped_calls={ }
Topl={len=0;content=
       [  ]}
full_trace=24
25
26
27
28
foo2 [defined, Return type: void, Formals: None, Locals:  p1:int*]

Issue location: line 35, column 5
Issue type: Memory Leak
Responsible var:
State:
unsat:false,
bo: { v5 -> [1, +oo] },
citv: { v5 -> ≥1 },
formula: known=true (no var=var)
               &&
               v5 = a1 +1
               &&
               [a1 +1]=v5
               &&
               true (no tableau)
               &&
               {is_int([v8]) = 1},
         pruned={[v5] ≠ 0},
         both=true (no var=var)
              &&
              v5 = a2 +1
              &&
              [a2 +1]=v5
              &&
              true (no tableau)
              &&
              {is_int([v8]) = 1}∧{[v5] ≠ 0}
{ roots={ };
  mem  ={ v2 -> { * -> v5 }, v5 -> { * -> v8 } };
  attrs={ v1 -> { MustBeValid(, None, t=0), Uninitialized },
          v2 -> { s&p1 (variable `p1` declared here at line 34 :t1 ) at line 35, column 5,
                  MustBeValid(, None, t=0),
                  WrittenTo ,
                  Blame(Client, foo2, [MemLeak;UseAfterFree;NPE;], [MLHand;UAFHand;NPEHand;], [Update;Update;Update;]) },
          v5 -> { Allocated,
                  DynamicType ,
                  ISLAbduced ,
                  MustBeValid(, None, t=0),
                  Uninitialized,
                  UnreachableAt(line 35, column 5),
                  Blame(Vendor, vendor_code, [MemLeak;UseAfterFree;NPE;], [MLHand;UAFHand;NPEHand;], [Update;Update;Update;]),
                  BlamePathCondition },
          v8 -> { Blame(Unknown, vendor_code, [MemLeak;UseAfterFree;NPE;], [MLHand;UAFHand;NPEHand;], [Update;Update;Update;]),
                  BlamePathCondition } };}
PRE=[{ roots={ };
       mem  ={ };
       attrs={ };}]
need_specialization=false
skipped_calls={ }
Topl={len=0;content=
       [  ]}
full_trace=33
34
35