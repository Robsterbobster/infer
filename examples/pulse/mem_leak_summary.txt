Pulse summary for abc is : 2 pre/post(s)
#0: unsat:false,
    bo: { },
    citv: { },
    formula: known=true (no var=var)
                   &&
                   true (no linear)
                   &&
                   true (no term_eqs)
                   &&
                   true (no tableau)
                   &&
                   true (no atoms),
             pruned=true (no atoms),
             both=true (no var=var)
                  &&
                  true (no linear)
                  &&
                  true (no term_eqs)
                  &&
                  true (no tableau)
                  &&
                  true (no atoms)
    { roots={ &x=v2, &p1=v1 };
      mem  ={ v1 -> { * -> v3 }, v2 -> { * -> v4 } };
      attrs={ v1 -> { MustBeValid(, None, t=0),
                      WrittenTo ,
                      Blame(Unknown, [MemLeak;UseAfterFree;NPE;], [MLHand;UAFHand;NPEHand;], [DelClient;DelClient;DelClient;]) },
              v2 -> { MustBeValid(, None, t=0) } };}
    PRE=[{ roots={ &x=v2, &p1=v1 };
           mem  ={ v1 -> { * -> v3 }, v2 -> { * -> v4 } };
           attrs={ v1 -> { MustBeInitialized(, t=0),
                           MustBeValid(, None, t=0) },
                   v2 -> { MustBeInitialized(, t=0),
                           MustBeValid(, None, t=0) } };}]
    need_specialization=false
    skipped_calls={ }
    Topl={len=0;content=
           [  ]}
    full_trace=11
    12
    14
    22
#1: {AbortProgram unsat:false,
                  bo: { v7 -> [1, +oo], v8 -> 0, v9 -> 1 },
                  citv: { v7 -> ≥1, v8 -> =null, v9 -> =1 },
                  formula: known=a4=a1
                                 &&
                                 v7 = a1 +1 ∧ v8 = 0 ∧ v9 = 1
                                 &&
                                 0=v8∧1=v9∧[a1 +1]=v7
                                 &&
                                 true (no tableau)
                                 &&
                                 {is_int([v7]) = 1},
                           pruned={[v7] ≠ 0},
                           both=a3=a2
                                &&
                                v7 = a2 +1 ∧ v8 = 0 ∧ v9 = 1
                                &&
                                0=v8∧1=v9∧[a2 +1]=v7∧[a3 +1]=v7
                                &&
                                true (no tableau)
                                &&
                                {is_int([v7]) = 1}∧{[v7] ≠ 0}
                  { roots={ n$0=v7, &x=v2, &p1=v1 };
                    mem  ={ v1 -> { * -> v7 },
                            v2 -> { * -> v4 },
                            v3 -> { },
                            v7 -> { * -> v9 } };
                    attrs={ v1 -> { MustBeValid(, None, t=0),
                                    WrittenTo ,
                                    Blame(Unknown, [MemLeak;UseAfterFree;NPE;], [MLHand;UAFHand;NPEHand;], [DelClient;DelClient;DelClient;]) },
                            v2 -> { MustBeValid(, None, t=0) },
                            v7 -> { DynamicType ,
                                    Invalid CFree(was invalidated by call to `free()`),
                                    MustBeValid(, None, t=0),
                                    WrittenTo ,
                                    Blame(Vendor, [MemLeak;UseAfterFree;NPE;], [MLHand;UAFHand;NPEHand;], [DelClient;DelClient;DelClient;]) },
                            v8 -> { Invalid ConstantDereference(is assigned to the null pointer),
                                    Blame(Client, [MemLeak;UseAfterFree;NPE;], [MLHand;UAFHand;NPEHand;], [DelClient;DelClient;DelClient;]) },
                            v9 -> { Invalid ConstantDereference(is assigned to the constant 1),
                                    Blame(Client, [MemLeak;UseAfterFree;NPE;], [MLHand;UAFHand;NPEHand;], [DelClient;DelClient;DelClient;]) } };}
                  PRE=[{ roots={ &x=v2, &p1=v1 };
                         mem  ={ v1 -> { * -> v3 },
                                 v2 -> { * -> v4 },
                                 v3 -> { },
                                 v4 -> { } };
                         attrs={ v1 -> { MustBeInitialized(, t=0),
                                         MustBeValid(, None, t=0) },
                                 v2 -> { MustBeInitialized(, t=0),
                                         MustBeValid(, None, t=0) } };}]
                  need_specialization=false
                  skipped_calls={ }
                  Topl={len=0;content=
                         [  ]}
                  full_trace=11
                  12
                  14
                  15
                  17
                  22}
