 foo [defined, Return type: void, Formals: None, Locals:  x:int* cond:int]
Use After Free
  [ 0.0s] idle
unsat:false,
  bo: { v4 -> [v4, min(0, v4)], v7 -> 0, v9 -> 0 },
  citv: { v4 -> ≤0, v7 -> =null, v9 -> =null },
  formula: known=v7=v9
                 &&
                 v7 = 0 ∧ v9 = 0
                 &&
                 0=v7∧rand()=v4
                 &&
                 true (no tableau)
                 &&
                 {is_int([v4]) = 1},
           pruned={[v4] < 1},
           both=v7=v9
                &&
                v4 = -a18 ∧ v7 = 0 ∧ v9 = 0
                &&
                0=v7∧rand()=v4∧[-a18]=v4
                &&
                true (no tableau)
                &&
                {is_int([v4]) = 1}
  { roots={ };
    mem  ={ v3 -> { * -> v4 }, v5 -> { * -> v7 } };
    attrs={ v1 -> { MustBeValid(, None, t=0), Uninitialized },
            v2 -> { MustBeValid(, None, t=0), Uninitialized },
            v3 -> { s&cond (variable `cond` declared here at line 6 :t1 ) at line 11, column 7,
                    MustBeValid(, None, t=0),
                    WrittenTo  },
            v5 -> { s&x (variable `x` declared here at line 7 :t5 ) at line 11, column 7,
                    MustBeValid(, None, t=0),
                    WrittenTo  },
            v7 -> { Invalid ConstantDereference(is assigned to the null pointer) },
            v9 -> { Invalid ConstantDereference(is assigned to the null pointer) } };}
  PRE=[{ roots={ };
         mem  ={ };
         attrs={ };}]
  need_specialization=false
  skipped_calls={ rand -> call to skipped function occurs here }
  Topl={len=0;content=
         [  ]}
  full_trace=5
  6
  7
  8
  11

 foo [defined, Return type: void, Formals: None, Locals:  x:int* cond:int]
Use After Free

unsat:false,
  bo: { v4 -> [v4, min(0, v4)], v8 -> [1, +oo], v9 -> 0, v12 -> 0 },
  citv: { v4 -> ≤0, v8 -> ≥1, v9 -> =null, v12 -> =0 },
  formula: known=a8=a1 ∧ v9=v12
                 &&
                 v8 = a1 +1 ∧ v9 = 0 ∧ v12 = 0
                 &&
                 0=v9∧rand()=v4∧[a1 +1]=v8
                 &&
                 true (no tableau)
                 &&
                 {is_int([v4]) = 1},
           pruned={[v4] < 1}∧{[v8] ≠ 0},
           both=a7=a2 ∧ v9=v12
                &&
                v4 = -a17 ∧ v8 = a2 +1 ∧ v9 = 0 ∧ v12 = 0
                &&
                0=v9∧rand()=v4∧[-a17]=v4∧[a2 +1]=v8∧[a7 +1]=v8
                &&
                true (no tableau)
                &&
                {is_int([v4]) = 1}∧{[v8] ≠ 0}
  { roots={ };
    mem  ={ v3 -> { * -> v4 }, v5 -> { * -> v8 } };
    attrs={ v1 -> { MustBeValid(, None, t=0), Uninitialized },
            v2 -> { MustBeValid(, None, t=0), Uninitialized },
            v3 -> { s&cond (variable `cond` declared here at line 6 :t1 ) at line 11, column 7,
                    MustBeValid(, None, t=0),
                    WrittenTo  },
            v5 -> { s&x (variable `x` declared here at line 7 :t5 ) at line 11, column 7,
                    MustBeValid(, None, t=0),
                    WrittenTo  },
            v8 -> { DynamicType ,
                    Invalid ConstantDereference(is assigned to the null pointer),
                    MustBeValid(, None, t=0),
                    Uninitialized },
            v9 -> { Invalid ConstantDereference(is assigned to the null pointer) },
            v12 -> { Invalid ConstantDereference(is assigned to the null pointer) } };}
  PRE=[{ roots={ };
         mem  ={ };
         attrs={ };}]
  need_specialization=false
  skipped_calls={ __infer_skip -> call to skipped function occurs here,
                  rand -> call to skipped function occurs here }
  Topl={len=0;content=
         [  ]}
  full_trace=5
  6
  7
  8
  9
  11

 foo [defined, Return type: void, Formals: None, Locals:  x:int* cond:int]
Use After Free

unsat:false,
  bo: { v4 -> [v4, min(0, v4)], v8 -> [1, +oo], v9 -> 0, v11 -> 0 },
  citv: { v4 -> ≤0, v8 -> ≥1, v9 -> =null, v11 -> =0 },
  formula: known=a4=a1 ∧ v9=v11
                 &&
                 v8 = a1 +1 ∧ v9 = 0 ∧ v11 = 0
                 &&
                 0=v9∧rand()=v4∧[a1 +1]=v8
                 &&
                 true (no tableau)
                 &&
                 {is_int([v4]) = 1},
           pruned={[v4] < 1}∧{[v8] ≠ 0},
           both=a3=a2 ∧ v9=v11
                &&
                v4 = -a16 ∧ v8 = a2 +1 ∧ v9 = 0 ∧ v11 = 0
                &&
                0=v9∧rand()=v4∧[-a16]=v4∧[a2 +1]=v8∧[a3 +1]=v8
                &&
                true (no tableau)
                &&
                {is_int([v4]) = 1}∧{[v8] ≠ 0}
  { roots={ };
    mem  ={ v3 -> { * -> v4 }, v5 -> { * -> v8 } };
    attrs={ v1 -> { MustBeValid(, None, t=0), Uninitialized },
            v2 -> { MustBeValid(, None, t=0), Uninitialized },
            v3 -> { s&cond (variable `cond` declared here at line 6 :t1 ) at line 11, column 7,
                    MustBeValid(, None, t=0),
                    WrittenTo  },
            v5 -> { s&x (variable `x` declared here at line 7 :t5 ) at line 11, column 7,
                    MustBeValid(, None, t=0),
                    WrittenTo  },
            v8 -> { DynamicType ,
                    Invalid CFree(was invalidated by call to `free()`),
                    MustBeValid(, None, t=0),
                    Uninitialized },
            v9 -> { Invalid ConstantDereference(is assigned to the null pointer) },
            v11 -> { Invalid ConstantDereference(is assigned to the null pointer) } };}
  PRE=[{ roots={ };
         mem  ={ };
         attrs={ };}]
  need_specialization=false
  skipped_calls={ __infer_skip -> call to skipped function occurs here,
                  rand -> call to skipped function occurs here }
  Topl={len=0;content=
         [  ]}
  full_trace=5
  6
  7
  8
  9
  11

 foo [defined, Return type: void, Formals: None, Locals:  x:int* cond:int]
Use After Free

unsat:false,
  bo: { v4 -> [max(1, v4), v4], v7 -> 0, v9 -> 0 },
  citv: { v4 -> ≥1, v7 -> =0, v9 -> =null },
  formula: known=v7=v9
                 &&
                 v7 = 0 ∧ v9 = 0
                 &&
                 0=v7∧rand()=v4
                 &&
                 true (no tableau)
                 &&
                 {is_int([v4]) = 1},
           pruned={1 ≤ [v4]},
           both=v7=v9
                &&
                v4 = a11 +1 ∧ v7 = 0 ∧ v9 = 0
                &&
                0=v7∧rand()=v4∧[a11 +1]=v4
                &&
                true (no tableau)
                &&
                {is_int([v4]) = 1}
  { roots={ };
    mem  ={ v3 -> { * -> v4 }, v5 -> { * -> v7 } };
    attrs={ v1 -> { MustBeValid(, None, t=0), Uninitialized },
            v2 -> { MustBeValid(, None, t=0), Uninitialized },
            v3 -> { s&cond (variable `cond` declared here at line 6 :t1 ) at line 11, column 7,
                    MustBeValid(, None, t=0),
                    WrittenTo  },
            v5 -> { s&x (variable `x` declared here at line 7 :t5 ) at line 12, column 5,
                    MustBeValid(, None, t=0),
                    WrittenTo  },
            v7 -> { Invalid ConstantDereference(is assigned to the null pointer) },
            v9 -> { Invalid ConstantDereference(is assigned to the null pointer) } };}
  PRE=[{ roots={ };
         mem  ={ };
         attrs={ };}]
  need_specialization=false
  skipped_calls={ rand -> call to skipped function occurs here }
  Topl={len=0;content=
         [  ]}
  full_trace=5
  6
  7
  8
  11
  12

 foo [defined, Return type: void, Formals: None, Locals:  x:int* cond:int]
Use After Free

{AbortProgram unsat:false,
                bo: { },
                citv: { },
                formula: known=true (no var=var)
                               &&
                               true (no linear)
                               &&
                               true (no term_eqs)
                               &&
                               true (no tableau)
                               &&
                               true (no atoms),
                         pruned=true (no atoms),
                         both=true (no var=var)
                              &&
                              true (no linear)
                              &&
                              true (no term_eqs)
                              &&
                              true (no tableau)
                              &&
                              true (no atoms)
                { roots={ };
                  mem  ={ };
                  attrs={ };}
                PRE=[{ roots={ };
                       mem  ={ };
                       attrs={ };}]
                need_specialization=false
                skipped_calls={ __infer_skip -> call to skipped function occurs here,
                                rand -> call to skipped function occurs here }
                Topl={len=0;content=
                       [  ]}
                full_trace=5
                6
                7
                8
                9
                11
                12}

 foo [defined, Return type: void, Formals: None, Locals:  x:int* cond:int]
Use After Free

{ISLLatentMemoryError unsat:false,
                        bo: { },
                        citv: { },
                        formula: known=true (no var=var)
                                       &&
                                       true (no linear)
                                       &&
                                       true (no term_eqs)
                                       &&
                                       true (no tableau)
                                       &&
                                       true (no atoms),
                                 pruned=true (no atoms),
                                 both=true (no var=var)
                                      &&
                                      true (no linear)
                                      &&
                                      true (no term_eqs)
                                      &&
                                      true (no tableau)
                                      &&
                                      true (no atoms)
                        { roots={ };
                          mem  ={ };
                          attrs={ };}
                        PRE=[{ roots={ };
                               mem  ={ };
                               attrs={ };}]
                        need_specialization=false
                        skipped_calls={ rand -> call to skipped function occurs here }
                        Topl={len=0;content=
                               [  ]}
                        full_trace=5
                        6
                        7
                        8
                        9}

 foo [defined, Return type: void, Formals: None, Locals:  x:int* cond:int]
Use After Free

{AbortProgram unsat:false,
                bo: { },
                citv: { },
                formula: known=true (no var=var)
                               &&
                               true (no linear)
                               &&
                               true (no term_eqs)
                               &&
                               true (no tableau)
                               &&
                               true (no atoms),
                         pruned=true (no atoms),
                         both=true (no var=var)
                              &&
                              true (no linear)
                              &&
                              true (no term_eqs)
                              &&
                              true (no tableau)
                              &&
                              true (no atoms)
                { roots={ };
                  mem  ={ };
                  attrs={ };}
                PRE=[{ roots={ };
                       mem  ={ };
                       attrs={ };}]
                need_specialization=false
                skipped_calls={ __infer_skip -> call to skipped function occurs here,
                                rand -> call to skipped function occurs here }
                Topl={len=0;content=
                       [  ]}
                full_trace=5
                6
                7
                8
                9
                11
                12}