 foo [defined, Return type: void, Formals: None, Locals:  y:int* x:int* cond:int]
  [ 0.0s] idle
unsat:false,
  bo: { v8 -> 0, v10 -> 0 },
  citv: { v8 -> =null, v10 -> =null },
  formula: known=v8=v10
                 &&
                 v8 = 0 ∧ v10 = 0
                 &&
                 0=v8∧rand()=v5
                 &&
                 true (no tableau)
                 &&
                 {is_int([v5]) = 1},
           pruned=true (no atoms),
           both=v8=v10
                &&
                v8 = 0 ∧ v10 = 0
                &&
                0=v8∧rand()=v5
                &&
                true (no tableau)
                &&
                {is_int([v5]) = 1}
  { roots={ };
    mem  ={ v4 -> { * -> v5 }, v6 -> { * -> v8 }, v13 -> { * -> v8 } };
    attrs={ v1 -> { MustBeValid(, None, t=0), Uninitialized },
            v2 -> { MustBeValid(, None, t=0), Uninitialized },
            v3 -> { MustBeValid(, None, t=0), Uninitialized },
            v4 -> { s&cond (variable `cond` declared here at line 6 :t1 ) at line 6, column 3,
                    MustBeValid(, None, t=0),
                    WrittenTo  },
            v6 -> { s&x (variable `x` declared here at line 7 :t6 ) at line 11, column 3,
                    MustBeValid(, None, t=0),
                    WrittenTo  },
            v8 -> { Invalid ConstantDereference(is assigned to the null pointer) },
            v10 -> { Invalid ConstantDereference(is assigned to the null pointer) },
            v13 -> { s&y (variable `y` declared here at line 11 :t15 ) at line 11, column 3,
                     MustBeValid(, None, t=0),
                     WrittenTo  } };}
  PRE=[{ roots={ };
         mem  ={ };
         attrs={ };}]
  need_specialization=false
  skipped_calls={ rand -> call to skipped function occurs here }
  Topl={len=0;content=
         [  ]}
  full_trace=5
  6
  7
  8
  11

 foo [defined, Return type: void, Formals: None, Locals:  y:int* x:int* cond:int]

unsat:false,
  bo: { v9 -> [1, +oo], v10 -> 0, v11 -> 0 },
  citv: { v9 -> ≥1, v10 -> =null, v11 -> =0 },
  formula: known=v10=v11
                 &&
                 v9 = a1 +1 ∧ v10 = 0 ∧ v11 = 0
                 &&
                 0=v10∧rand()=v5∧[a1 +1]=v9
                 &&
                 true (no tableau)
                 &&
                 {is_int([v5]) = 1},
           pruned={[v9] ≠ 0},
           both=v10=v11
                &&
                v9 = a2 +1 ∧ v10 = 0 ∧ v11 = 0
                &&
                0=v10∧rand()=v5∧[a2 +1]=v9
                &&
                true (no tableau)
                &&
                {is_int([v5]) = 1}∧{[v9] ≠ 0}
  { roots={ };
    mem  ={ v4 -> { * -> v5 }, v6 -> { * -> v9 }, v12 -> { * -> v9 } };
    attrs={ v1 -> { MustBeValid(, None, t=0), Uninitialized },
            v2 -> { MustBeValid(, None, t=0), Uninitialized },
            v3 -> { MustBeValid(, None, t=0), Uninitialized },
            v4 -> { s&cond (variable `cond` declared here at line 6 :t1 ) at line 6, column 3,
                    MustBeValid(, None, t=0),
                    WrittenTo  },
            v6 -> { s&x (variable `x` declared here at line 7 :t6 ) at line 11, column 3,
                    MustBeValid(, None, t=0),
                    WrittenTo  },
            v9 -> { Allocated,
                    DynamicType ,
                    MustBeValid(, None, t=0),
                    Uninitialized,
                    UnreachableAt(line 11, column 3) },
            v10 -> { Invalid ConstantDereference(is assigned to the null pointer) },
            v11 -> { Invalid ConstantDereference(is assigned to the null pointer) },
            v12 -> { s&y (variable `y` declared here at line 11 :t18 ) at line 11, column 3,
                     MustBeValid(, None, t=0),
                     WrittenTo  } };}
  PRE=[{ roots={ };
         mem  ={ };
         attrs={ };}]
  need_specialization=false
  skipped_calls={ __infer_skip -> call to skipped function occurs here,
                  rand -> call to skipped function occurs here }
  Topl={len=0;content=
         [  ]}
  full_trace=5
  6
  7
  8
  9
  11