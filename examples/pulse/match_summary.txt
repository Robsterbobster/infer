 foo [defined, Return type: void, Formals: None, Locals:  x:int* cond:int]
  [ 0.0s] idle
unsat:false,
  bo: { v7 -> 0, v9 -> 0 },
  citv: { v7 -> =null, v9 -> =null },
  formula: known=v7=v9
                 &&
                 v7 = 0 ∧ v9 = 0
                 &&
                 0=v7∧rand()=v4
                 &&
                 true (no tableau)
                 &&
                 {is_int([v4]) = 1},
           pruned=true (no atoms),
           both=v7=v9
                &&
                v7 = 0 ∧ v9 = 0
                &&
                0=v7∧rand()=v4
                &&
                true (no tableau)
                &&
                {is_int([v4]) = 1}
  { roots={ };
    mem  ={ v3 -> { * -> v4 }, v5 -> { * -> v7 } };
    attrs={ v1 -> { MustBeValid(, None, t=0), Uninitialized },
            v2 -> { MustBeValid(, None, t=0), Uninitialized },
            v3 -> { s&cond (variable `cond` declared here at line 6 :t1 ) at line 6, column 3,
                    MustBeValid(, None, t=0),
                    WrittenTo  },
            v5 -> { s&x (variable `x` declared here at line 7 :t6 ) at line 8, column 7,
                    MustBeValid(, None, t=0),
                    WrittenTo  },
            v7 -> { Invalid ConstantDereference(is assigned to the null pointer) },
            v9 -> { Invalid ConstantDereference(is assigned to the null pointer) } };}
  PRE=[{ roots={ };
         mem  ={ };
         attrs={ };}]
  need_specialization=false
  skipped_calls={ rand -> call to skipped function occurs here }
  Topl={len=0;content=
         [  ]}
  full_trace=5
  6
  7
  8

 foo [defined, Return type: void, Formals: None, Locals:  x:int* cond:int]

unsat:false,
  bo: { v8 -> [1, +oo], v9 -> 0, v10 -> 0 },
  citv: { v8 -> ≥1, v9 -> =null, v10 -> =0 },
  formula: known=v9=v10
                 &&
                 v8 = a1 +1 ∧ v9 = 0 ∧ v10 = 0
                 &&
                 0=v9∧rand()=v4∧[a1 +1]=v8
                 &&
                 true (no tableau)
                 &&
                 {is_int([v4]) = 1},
           pruned={[v8] ≠ 0},
           both=v9=v10
                &&
                v8 = a2 +1 ∧ v9 = 0 ∧ v10 = 0
                &&
                0=v9∧rand()=v4∧[a2 +1]=v8
                &&
                true (no tableau)
                &&
                {is_int([v4]) = 1}∧{[v8] ≠ 0}
  { roots={ };
    mem  ={ v3 -> { * -> v4 }, v5 -> { * -> v8 } };
    attrs={ v1 -> { MustBeValid(, None, t=0), Uninitialized },
            v2 -> { MustBeValid(, None, t=0), Uninitialized },
            v3 -> { s&cond (variable `cond` declared here at line 6 :t1 ) at line 6, column 3,
                    MustBeValid(, None, t=0),
                    WrittenTo  },
            v5 -> { s&x (variable `x` declared here at line 7 :t6 ) at line 9, column 5,
                    MustBeValid(, None, t=0),
                    WrittenTo  },
            v8 -> { Allocated,
                    DynamicType ,
                    MustBeValid(, None, t=0),
                    Uninitialized,
                    UnreachableAt(line 9, column 5) },
            v9 -> { Invalid ConstantDereference(is assigned to the null pointer) },
            v10 -> { Invalid ConstantDereference(is assigned to the null pointer) } };}
  PRE=[{ roots={ };
         mem  ={ };
         attrs={ };}]
  need_specialization=false
  skipped_calls={ __infer_skip -> call to skipped function occurs here,
                  rand -> call to skipped function occurs here }
  Topl={len=0;content=
         [  ]}
  full_trace=5
  6
  7
  8
  9