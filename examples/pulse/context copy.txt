 main [defined, Return type: int, Formals: None, Locals:  p:int* x:int]
unsat:false,
bo: { v5 -> [1, +oo], v7 -> 123 },
citv: { v5 -> ≥1, v7 -> =123 },
formula: known=true (no var=var)
               &&
               v5 = a2 +1 ∧ v7 = 123
               &&
               123=v7∧rand()=v4∧vendor([v4])=v5∧[a2 +1]=v5
               &&
               true (no tableau)
               &&
               {is_int([v4]) = 1},
         pruned=true (no atoms),
         both=true (no var=var)
              &&
              v5 = a1 +1 ∧ v7 = 123
              &&
              123=v7∧rand()=v4∧vendor([v4])=v5∧[a1 +1]=v5
              &&
              true (no tableau)
              &&
              {is_int([v4]) = 1}
{ roots={ };
  mem  ={ v1 -> { * -> v5 }, v3 -> { * -> v4 }, v5 -> { * -> v7 } };
  attrs={ v1 -> { s&p (variable `p` declared here at line 35 :t0 ) at line 40, column 3,
                  MustBeValid(, None, t=0),
                  WrittenTo  },
          v2 -> { MustBeValid(, None, t=0), Uninitialized },
          v3 -> { s&x (variable `x` declared here at line 37 :t1 ) at line 39, column 3,
                  MustBeValid(, None, t=0),
                  WrittenTo  },
          v5 -> { Invalid CFree(was invalidated by call to `free()`),
                  PropagateTaintFrom([{v= v4}]),
                  WrittenTo  },
          v7 -> { Invalid ConstantDereference(is assigned to the constant 123) } };}
PRE=[{ roots={ };
       mem  ={ };
       attrs={ };}]
need_specialization=false
skipped_calls={ rand -> call to skipped function occurs here,
                vendor -> call to skipped function occurs here }
Topl={len=0;content=
       [  ]}
full_trace=35
37
39
40

 main [defined, Return type: int, Formals: None, Locals:  p:int* x:int]
{LatentInvalidAccess(p) unsat:false,
                        bo: { },
                        citv: { },
                        formula: known=true (no var=var)
                                       &&
                                       true (no linear)
                                       &&
                                       true (no term_eqs)
                                       &&
                                       true (no tableau)
                                       &&
                                       true (no atoms),
                                 pruned=true (no atoms),
                                 both=true (no var=var)
                                      &&
                                      true (no linear)
                                      &&
                                      true (no term_eqs)
                                      &&
                                      true (no tableau)
                                      &&
                                      true (no atoms)
                        { roots={ };
                          mem  ={ };
                          attrs={ };}
                        PRE=[{ roots={ };
                               mem  ={ };
                               attrs={ };}]
                        need_specialization=false
                        skipped_calls={ rand -> call to skipped function occurs here,
                                        vendor -> call to skipped function occurs here }
                        Topl={len=0;content=
                               [  ]}
                        full_trace=35
                        37
                        39
                        40}